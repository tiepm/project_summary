In computing, C (/ˈsiː/, as in the letter C) is a general-purpose programming language initially developed by Dennis Ritchie between 1969 and 1973 at AT&T Bell Labs.[5][6] Like most imperative languages in the ALGOL tradition, C has facilities for structured programming and allows lexical variable scope and recursion, while a static type system prevents many unintended operations. Its design provides constructs that map efficiently to typical machine instructions, and therefore it has found lasting use in applications that had formerly been coded in assembly language, most notably system software like the Unix computer operating system.[7]

C is one of the most widely used programming languages of all time,[8][9] and C compilers are available for the majority of available computer architectures and operating systems.

Many later languages have borrowed directly or indirectly from C, including D, Go, Rust, Java, JavaScript, Limbo, LPC, C#, Objective-C, Perl, PHP, Python, Verilog (hardware description language),[4] and Unix's C shell. These languages have drawn many of their control structures and other basic features from C. Most of them (with Python being the most dramatic exception) are also very syntactically similar to C in general, and they tend to combine the recognizable expression and statement syntax of C with underlying type systems, data models, and semantics that can be radically different. C++ and Objective-C started as compilers that generated C code; C++ is currently nearly a superset of C,[10] while Objective-C is a strict superset of C.[11]

Before there was an official standard for C, many users and implementors relied on an informal specification contained in a book by Dennis Ritchie and Brian Kernighan; that version is generally referred to as "K&R" C. In 1989 the American National Standards Institute published a standard for C (generally called "ANSI C" or "C89"). The next year, the same specification was approved by the International Organization for Standardization as an international standard (generally called "C90"). ISO later released an extension to the internationalization support of the standard in 1995, and a revised standard (known as "C99") in 1999. The current version of the standard (now known as "C11") was approved in December 2011.[12]

Contents

    1 Design
    2 Characteristics
    3 History
        3.1 Early developments
        3.2 K&R C
        3.3 ANSI C and ISO C
        3.4 C99
        3.5 C11
        3.6 Embedded C
    4 Syntax
        4.1 Character set
        4.2 Keywords
        4.3 Operators
    5 "Hello, world" example
    6 Data types
        6.1 Pointers
        6.2 Arrays
        6.3 Array-pointer interchangeability
    7 Memory management
    8 Libraries
    9 Language tools
    10 Uses
    11 Related languages
    12 See also
    13 Notes
    14 References
    15 Further reading
    16 External links

Design

C is an imperative (procedural) language. It was designed to be compiled using a relatively straightforward compiler, to provide low-level access to memory, to provide language constructs that map efficiently to machine instructions, and to require minimal run-time support. C was therefore useful for many applications that had formerly been coded in assembly language, such as in system programming.

Despite its low-level capabilities, the language was designed to encourage cross-platform programming. A standards-compliant and portably written C program can be compiled for a very wide variety of computer platforms and operating systems with few changes to its source code. The language has become available on a very wide range of platforms, from embedded microcontrollers to supercomputers.
Characteristics

Like most imperative languages in the ALGOL tradition, C has facilities for structured programming and allows lexical variable scope and recursion, while a static type system prevents many unintended operations. In C, all executable code is contained within subroutines, which are called "functions" (although not in the strict sense of functional programming). Function parameters are always passed by value. Pass-by-reference is simulated in C by explicitly passing pointer values. C program source text is free-format, using the semicolon as a statement terminator and curly braces for grouping blocks of statements.

The C language also exhibits the following characteristics:

    There is a small, fixed number of keywords, including a full set of flow of control primitives: for, if/else, while, switch, and do/while. There is one namespace, and user-defined names are not distinguished from keywords by any kind of sigil.
    There are a large number of arithmetical and logical operators, such as +, +=, ++, &, ~, etc.
    More than one assignment may be performed in a single statement.
    Function return values can be ignored when not needed.
    Typing is static, but weakly enforced: all data has a type, but implicit conversions can be performed; for instance, characters can be used as integers.
    Declaration syntax mimics usage context. C has no "define" keyword; instead, a statement beginning with the name of a type is taken as a declaration. There is no "function" keyword; instead, a function is indicated by the parentheses of an argument list.
    User-defined (typedef) and compound types are possible.
        Heterogeneous aggregate data types (struct) allow related data elements to be accessed and assigned as a unit.
        Array indexing is a secondary notation, defined in terms of pointer arithmetic. Unlike structs, arrays are not first-class objects; they cannot be assigned or compared using single built-in operators. There is no "array" keyword, in use or definition; instead, square brackets indicate arrays syntactically, e.g. month[11].
        Enumerated types are possible with the enum keyword. They are not tagged, and are freely interconvertible with integers.
        Strings are not a separate data type, but are conventionally implemented as null-terminated arrays of characters.
    Low-level access to computer memory is possible by converting machine addresses to typed pointers.
    Procedures (subroutines not returning values) are a special case of function, with an untyped return type void.
    Functions may not be defined within the lexical scope of other functions.
    Function and data pointers permit ad hoc run-time polymorphism.
    A preprocessor performs macro definition, source code file inclusion, and conditional compilation.
    There is a basic form of modularity: files can be compiled separately and linked together, with control over which functions and data objects are visible to other files via static and extern attributes.
    Complex functionality such as I/O, string manipulation, and mathematical functions are consistently delegated to library routines.

C does not include some features found in newer, more modern high-level languages, including object orientation and garbage collection.

